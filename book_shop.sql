CREATE TYPE ROLE_NAME AS ENUM ('admin', 'manager', 'customer');

CREATE TABLE IF NOT EXISTS ROLES (
    ROLE_ID SERIAL PRIMARY KEY,
    ROLE_NAME ROLE_NAME,
    DESCRIPTION VARCHAR(128),
    PERMISSIONS VARCHAR(128)
);

INSERT INTO ROLES (ROLE_NAME, DESCRIPTION, PERMISSIONS) VALUES ('admin', 'admin', 'write.read');
INSERT INTO ROLES (ROLE_NAME, DESCRIPTION, PERMISSIONS) VALUES ('manager', 'admin', 'write.read');
INSERT INTO ROLES (ROLE_NAME, DESCRIPTION, PERMISSIONS) VALUES ('customer', 'admin', 'read');

CREATE TABLE IF NOT EXISTS USERS (
    USER_ID SERIAL PRIMARY KEY,
    CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    NAME VARCHAR(60) NOT NULL,
    EMAIL VARCHAR(60) NOT NULL UNIQUE,
    PASSWORD VARCHAR(60) NOT NULL,
    PHONE_NUM VARCHAR(20),
    ROLE_ID INTEGER NOT NULL,
    BIRTHDAY DATE,
    ACTIVE_STATUS BOOLEAN,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID)
);

CREATE TYPE COVER_TYPE AS ENUM ('hardcover', 'paperback', 'leatherbound', 'e-book', 'audiobook', 'other');

CREATE TABLE IF NOT EXISTS BOOKS (
    BOOK_ID SERIAL PRIMARY KEY,
    ISBN VARCHAR(20) NOT NULL UNIQUE,
    TITLE VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    PRICE INTEGER NOT NULL CHECK (PRICE >= 0),
    RATING INTEGER CHECK (RATING <= 10) DEFAULT 0,
    PUBL_YEAR INTEGER,
    PUBLISHER VARCHAR(255),
    NUM_PAGES INTEGER,
    COVER_TYPE COVER_TYPE,
    HEIGHT INTEGER,
    WIDTH INTEGER,
    THICKNESS INTEGER,
    WEIGHT INTEGER,
    CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS IDX_ISBN ON BOOKS(ISBN);
CREATE INDEX IF NOT EXISTS TITLE ON BOOKS(TITLE);

CREATE TABLE IF NOT EXISTS BOOKS (
    ID SERIAL PRIMARY KEY,
    SERIE_ID INTEGER NOT NULL,
    BOOK_ID INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS REVIEWS (
    ID SERIAL PRIMARY KEY,
    BOOK_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    REVIEW TEXT NOT NULL,
    CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS RATES (
    ID SERIAL PRIMARY KEY,
    BOOK_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    RATE INTEGER NOT NULL CHECK (RATE <= 10),
    CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS AUTHORS (
    AUTHOR_ID SERIAL PRIMARY KEY,
    AUTHOR_NAME VARCHAR(128) NOT NULL,
    BIRTHDAY DATE,
    DESCRIPTION TEXT
);

CREATE INDEX IF NOT EXISTS AUTHOR_NAME ON AUTHORS(AUTHOR_NAME);

CREATE TABLE IF NOT EXISTS GENRE_TAGS (
    GENRE_TAG_ID SERIAL PRIMARY KEY,
    GENRE_TAG_NAME VARCHAR(128) NOT NULL,
    DESCRIPTION TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOK_AUTHORS (
    ID SERIAL PRIMARY KEY,
    BOOK_ID INTEGER NOT NULL,
    AUTHOR_ID INTEGER NOT NULL,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID)
);

CREATE TYPE STATUS_TYPE AS ENUM (
    'ordered', 'processing', 'awaiting payment', 'preparing for shipment',
    'delivered', 'canceled', 'refunded', 'pending', 'completed', 'issues'
);

CREATE TABLE IF NOT EXISTS ORDERS (
    ORDER_ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    TOTAL_PRICE NUMERIC(10, 2) NOT NULL,
    STATUS STATUS_TYPE NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS ORDER_ITEMS (
    ID SERIAL PRIMARY KEY,
    ORDER_ID INTEGER NOT NULL,
    BOOK_ID INTEGER NOT NULL,
    BOOK_PRICE NUMERIC(10, 2) NOT NULL,
    QUANTITY INTEGER NOT NULL,
    SALE_ID INTEGER,
    TOTAL_ITEM_PRICE NUMERIC(10, 2) NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID)
);

CREATE TABLE IF NOT EXISTS SALES (
    SALE_ID SERIAL PRIMARY KEY,
    SALE_PERCENT INTEGER NOT NULL,
    START_PERIOD DATE NOT NULL,
    STOP_PERIOD DATE NOT NULL,
    DESCRIPTION TEXT
);

